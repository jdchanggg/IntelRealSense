------------------------- SOFTWARE -------------------------

 V  2 camera RGB/depth stream
 V  Map depth to color
 V  Sync between 2 pairs
 V  Save RGB/depth frames as PNG
    V raw bits, binary output
    - memory store, batch save
    - multithreading
    Output point cloud directly (not 30 fps)
    - PCL external dependency
    Set camera baseline
    Get intrinsic parameters (Matlab/OpenCV)
 V  Stream 30fps (currently 640x480)
   -Option to stream every fps smoothly (ie 60fps)
   -Master/slave synchronization in software
   -Exposure, etc

------------------------- LINKS -------------------------

Libraries	  https://github.com/IntelRealSense/librealsense
Examples	  https://github.com/IntelRealSense/librealsense/tree/master/examples
SDK		  https://github.com/IntelRealSense/librealsense/releases
API Documentation https://intelrealsense.github.io/librealsense/doxygen/annotated.html
SDK Install 	  https://github.com/IntelRealSense/librealsense/blob/master/doc/distribution_windows.md
SDK Install	  https://github.com/IntelRealSense/librealsense/releases/tag/v2.23.0
API How to	  https://github.com/IntelRealSense/librealsense/wiki/API-How-To
Visual Studio C++ Walkthrough	https://docs.microsoft.com/en-us/cpp/ide/walkthrough-testing-a-project-cpp?view=vs-2019
PCL		  https://github.com/IntelRealSense/librealsense/blob/master/wrappers/pcl/pcl/rs-pcl.cpp
PCL Setup	  https://writingovercoffeeblog.wordpress.com/2017/06/11/setup-pcl-on-visual-studio-2015-the-no-fuss-way/

------------------------- Record with Intel Viewer  -------------------------

add source, control, intercamera sync, mode 1 and 2, record

=====================================================================
========================= COMPLETE TUTORIAL ========================= 
=====================================================================

------------------------- Download SDK Examples  -------------------------
Get laptop
Download Visual Studio C++
Go to https://github.com/IntelRealSense/librealsense/releases
Go to Assets
Download latest Intel.RealSense.SDK-WIN10-2.24.0939.exe
Go to Local Disk (C:) -> Program Files (x86) -> IntelRealSense SDK 2.0
Open examples by clicking on ar-basic.vcxproj
Replace ar-basic.cpp code with own code
Right click project >> Set as Startup Project

------------------------- Install OpenCV with VCPKG -------------------------
Go to https://docs.microsoft.com/en-us/cpp/build/vcpkg?view=vs-2019
Download to C:/Program Files (x86) 
Open cmd window as admin
cd C:/Program Files (x86)/vcpkg-master
bootstrap-vcpkg.bat
vcpkg search opencv
vcpkg install opencv
vcpkg list
------------------------- Add OpenCV to Visual Studio  -------------------------
Project >> align-save properties >> C/C++ >> General >> Additional Include Directories
Add C:\Program Files (x86)\vcpkg-master\installed\x86-windows\include;
Project >> align-save properties >> VC++ Directories >> Library Directories
Add C:\Program Files (x86)\vcpkg-master\installed\x86-windows\lib
Porject >> align-save properties >> Linker >> Input >> Additional Dependencies
Add the following under Additional Dependencies
opencv_core246d.lib
opencv_imgproc246d.lib
opencv_highgui246d.lib
opencv_ml246d.lib
opencv_video246d.lib
opencv_features2d246d.lib
opencv_calib3d246d.lib
opencv_objdetect246d.lib
opencv_contrib246d.lib
opencv_legacy246d.lib
opencv_flann246d.lib

------------------------- Hardware  -------------------------

Attach camera sync cable
Plug left camera to left USB and right camera to right USB
Build code
Run Local Windows Debugger to start recording and streaming
Press stop debugging to stop recording and streaming

------------------------- VCPKG -------------------------

Go to https://docs.microsoft.com/en-us/cpp/build/vcpkg?view=vs-2019
Download to C:/Program Files (x86) 
Open cmd window as admin
cd C:/Program Files (x86)/vcpkg-master
bootstrap-vcpkg.bat
vcpkg search opencv
vcpkg install opencv
vcpkg list

=====================================================================
=====================================================================
=====================================================================

------------------------- PCL -------------------------

PCL Setup	  https://github.com/IntelRealSense/librealsense/tree/master/wrappers/pcl#windows

If OpenCV_DIR error, add cmake to path in cmd line
set PATH="C:\Program Files (x86)\CMake 2.8\bin\";%PATH%
Then 

------------------------- SDK Examples Used -------------------------

rs-multicam.cpp
rs-align.cpp
rs-save-to-disk.cpp

------------------------- VARIABLES -------------------------

fs		rs2::frameset
new_frames	size 2

------------------------- VISUAL STUDIO 2019 C++ -------------------------

Build project --> Add source and header files
Add files by right clicking under project and adding, not Ctrl+N

Compile : convert high level code to machine level code
Build   : convert high level language to an executable (compiling and linking)

Build Solution    : builds everything
Build hello-world : builds single project
Compile           : builds single file

Change start-up project --> right click another project and click Set as Startup Project

Add path to headers with:
Project >> align-save properties >> C/C++ >> General >> Additional Include Directories

------------------------- C++ Notes -------------------------

------------------------- Struct -------------------------

struct Food{
  int Weight;
  float Price;
};
int main(){
  Food Apple;
  Food pear;
  Apple.Weight = 90;
  Apple.Price = 9.99;
  Pear.Weight = 80;
  Pear.Price = 99.99;
  cout << "Apple weight: " << Apple.Weight << endl << "Apple price: " << Apple.Price << endl << endl;
  cout << "Pear weight: " << Pear.Weight << endl << "Pear price: " << Pear.Price << endl << endl;

------------------------- push_back, emplace_back -------------------------

list.push_back(40);    adds 40 to end of vector list
list.emplace_back(40); adds 40 to end of vector list
list.pop_back();       removes last item off vector

------------------------- References -------------------------

int x = 10;	       ref and x are same variable
int& ref = x;

// References can modify the passed parameters in a function
void swap (int& first, int& second)
{
  int temp = first;
  first = second;
  second = temp;
}
int main()
{
  int a = 2, b = 3;
  swap (a, b);
  cout << a << " " << b;
  return 0;
}

// Avoiding copy of large structures
struct Student {
  string name;
  string address;
  int rollNo;
}
// Without &, new copy of student object is created
void print(const Student &s)
{
  cout << s.name << " " << s.address << " " << s.rollNo;
}

// For Each Loops to modify all objects
int main()
{
  vector<int> vect{ 10, 20, 30, 40 };
  for (int &x : vect)
    x = x + 5;
  for (int x : vect)
    cout << x << " ";
  return 0;
}

// Avoid copy of whole object
int main()
{
  vector<string> vect{"geeksforgeeks practice", 
                   "geeksforgeeks write",
                   "geeksforgeeks ide"};
  for (const auto &x : vect)
    cout << x << endl;
  return 0;
}

References cannot be reseated like pointers
References cannot be NULL like pointers
References must be initialized when declared unlike pointers

auto		=> will copy the element, but a reference is more efficient
auto&		=> will only bind to modifiable lvalues
const auto& 	=> will bind to anything but make it const, giving us const_iterator
const auto&&	=> will bind to rvalues

------------------------- sprintf -------------------------

Used to concatenate strings

------------------------- (void*) -------------------------

General pointer that can point to anything








